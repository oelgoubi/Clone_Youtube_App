{"version":3,"sources":["component/SearchBar.js","api/youtube.js","keys/AuthKey.js","component/VideoItem.js","component/VideoList.js","component/VideoDetail.js","component/App.js","serviceWorker.js","index.js"],"names":["SearchBar","props","useState","term","setTerm","className","onSubmit","e","preventDefault","style","color","fontSize","font","placeholder","name","type","value","onChange","target","baseParams","part","maxResults","key","youtube","axios","create","baseURL","VideoItem","video","onVideoClicked","snippet","onClick","alt","description","src","thumbnails","medium","url","title","VideoList","videos","videosList","map","id","videoId","console","log","VideoDetail","videoScr","publishedAt","App","state","selectedVideo","onSubmitForm","keyword","a","get","params","q","response","data","items","filter","setState","this","marginTop","width","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8dbe22b6.chunk.js","sourcesContent":["import React,{useState} from 'react';\r\nimport '../style/SearchBar.css';\r\n\r\n\r\n\r\nfunction SearchBar(props) {\r\n   const  [term,setTerm] = useState(\"\");\r\n   const  onInputChange = (e)=>{\r\n        e.preventDefault();\r\n        setTerm(e.target.value)\r\n    }\r\n\r\n   const onFormSumbit = e =>{\r\n        e.preventDefault();\r\n        props.onSubmit(term);\r\n        setTerm(\"\")\r\n    }\r\n\r\n    \r\n        return (\r\n            <div className=\"serachbar ui segment\">\r\n                <form className=\"ui form\" onSubmit={onFormSumbit}>\r\n                    <div className=\"field\">\r\n                        <label style={{color:\"red\", fontSize:\"27px\", font:\"Comic Sans\"}}><span>YouGoubi</span></label>\r\n                        <input placeholder=\"search for a video\" name=\"searchVid\" type=\"text\" \r\n                        value={term}\r\n                        onChange={onInputChange}/>\r\n                    </div>\r\n                    <button type=\"submit\" className=\"ui primary button\">\r\n                       Search\r\n                    </button>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n\r\n\r\n\r\nexport default SearchBar;","import axios from 'axios';\r\nimport {AuthKey} from '../keys/AuthKey'\r\n\r\n// to avoid params overriding \r\nexport const baseParams = {\r\n    part: \"snippet\",\r\n    maxResults: 10,\r\n    key: AuthKey\r\n  };\r\n  \r\nexport const youtube = axios.create({\r\n    baseURL: \"https://www.googleapis.com/youtube/v3\"\r\n  });","\r\nexport  const AuthKey = 'AIzaSyAUIindg1ltYaPaohcJWqvJsXLfIA-9u0A';","import React from 'react';\r\nimport '../style/VideoItem.css'\r\n\r\nconst VideoItem = ({video, onVideoClicked}) =>{\r\n    const {snippet} = video;\r\n\r\n\r\n    return(\r\n      <div className=\"video-item  item\" onClick={()=>onVideoClicked(video)} >\r\n         <img className=\"ui image\" alt ={snippet.description} src={snippet.thumbnails.medium.url}/>   \r\n         <div className=\"content\">\r\n             <div className=\"header\">{snippet.title}</div> \r\n         </div>\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default VideoItem;","import React from 'react';\r\nimport VideoItem from './VideoItem'\r\n\r\nconst  VideoList = ({videos, onVideoClicked}) =>{\r\n    \r\n     const videosList = videos.map((video) =>{\r\n       if(!video.id.videoId) {console.log(\"not found\");}\r\n       return <VideoItem video={video} onVideoClicked={onVideoClicked} key={video.id.videoId} />  \r\n     });\r\n\r\n    return(\r\n        <div className=\"ui relaxed divided list\">\r\n            {videosList}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default VideoList;","import React from 'react';\r\n\r\n\r\n\r\nconst VideoDetail = ({ video }) => {\r\n\r\n    if (!video) {\r\n        return <div></div>\r\n    }\r\n    \r\n    const videoScr = `https://www.youtube.com/embed/${video.id.videoId}`;\r\n    return (\r\n        <div>\r\n             <div className=\"ui embed\" >\r\n                 <iframe title={video.snippet.title} src={videoScr} />\r\n             </div>\r\n            <div className=\"ui grid segment\">\r\n               <div className=\"ui row\">\r\n                    <h4 className=\"header sixteen wide column\">{video.snippet.title}</h4>\r\n                </div>\r\n                <div className=\"ui row\">\r\n                  <div className=\"ten wide column\">\r\n                     <p >{video.snippet.description}</p>\r\n                  </div>\r\n                  <div className=\"ui vertical divider one wide column\"></div>\r\n                  <div className=\"four wide column\">\r\n                     <p >{video.snippet.publishedAt}</p>\r\n                  </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default VideoDetail;","import React from 'react';\nimport SearchBar from './SearchBar';\nimport { youtube, baseParams } from '../api/youtube';\nimport VideoList from './VideoList';\nimport VideoDetail from './VideoDetail'\n\nclass App extends React.Component {\n  state = { videos: [], selectedVideo: null };\n\n\n  componentDidMount()\n  {\n    this.onSubmitForm(\"Peace\");  // when the App is loading\n  }\n\n  onSubmitForm = async (keyword) => {\n\n    const response = await youtube.get('/search', {\n      params: {\n        ...baseParams,\n        q: keyword\n      }\n    });\n \n    const videos = response.data.items.filter(video => video.id.videoId)\n    this.setState({      // keep only the videos and  // Defaulting Video Selection\n      videos: videos,\n      selectedVideo: videos[0]\n    })\n   \n  }\n\n  onVideoClicked = video => {\n    this.setState({\n      selectedVideo: video\n    })\n  }\n\n\n\n\n\n  render() {\n    return (\n      <div className=\"App ui container\" style={{ marginTop: \"20px\", width: \"900px\" }}>\n        <SearchBar onSubmit={this.onSubmitForm} />\n        <div className=\"ui grid\">\n          <div className=\"ui row\">\n            <div className=\"ten wide column\">\n              <VideoDetail video={this.state.selectedVideo} />\n            </div>\n            <div className=\"six wide column\">\n              <VideoList videos={this.state.videos} onVideoClicked={this.onVideoClicked} />\n            </div>\n\n          </div>\n\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './component/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}